also must be note this, don't create unnecessary files, update the current files, if needed to create files then only create new file, else don't mash up things/codebase. if has duplicate file remove them, also don't replace/rename files, it's makes more problems to other things.

Make operations simple, essential, and frustration-free.

No duplicate or irrelevant options ‚Üí only show what‚Äôs needed for the tool context.

Keep UI consistent and intuitive: both beginners and professionals should complete tasks without tutorials.

Preview canvas & sidebar should be scalable and reusable for 2000+ tools.

I am building an advanced Image/PDF tools platform (similar to ilovepdf.com and iloveimg.com), but I want to make it the best in the world with 2k+ tools planned in the future.
Currently, my layout is:

Left side canvas/preview (main working area for image/PDF).

Right sidebar tools/options (inputs, sliders, selectors, settings, presets, etc) but keep in minimun which are essentials only, other things can be done from the left side canvas/preview.
This base structure is good, but I want it to be much richer, easier, faster, and more interactive for users.

üîπ Current Tools to Complete & Optimize

Image Tools

Background Remover

Image Compressor

Image Converter (JPG ‚áÑ PNG ‚áÑ WebP, etc.)

Image Cropper (‚ö†Ô∏è only single file allowed for precision cropping, with adjustable transform handles as like iloveimg.com)

Image Resizer (with presets like % scaling, pixel input, aspect ratio lock/unlock (1 input changed to other will be auto updated), social media sizes)

Image Rotator/Flipper

Image to PDF

Image Watermark (text + logo watermark, opacity, position, repeat pattern option)

PDF Tools

PDF Compressor

PDF Merger

PDF Password Protector (lock/unlock)

PDF Splitter (by pages, range, bookmarks)

PDF to Image (select resolution/quality, export as ZIP if multiple pages)

PDF Watermark (text + image watermark, position, opacity, tiling option)

üîπ Enhancements & UX/UI Improvements

Responsive & Mobile-first UX: Ensure every tool works seamlessly on mobile/tablet with gestures (pinch-to-zoom, drag, rotate with touch).

Live Preview Always Visible: The canvas should instantly reflect all edits/changes (no hidden steps).

Drag & Drop Everywhere: Support drag-and-drop for uploads, rearranging PDF pages, resizing images, and placing watermarks.

Undo/Redo + Reset Tool: Every tool should have quick undo, redo, and reset options for safety.

Smart Auto-Save: Work-in-progress is cached in browser (local storage) so users don‚Äôt lose progress.

Prebuilt Presets/Templates: For common use cases (e.g., Instagram story crop, YouTube thumbnail resize, LinkedIn profile size, A4 PDF export).

Multi-language & RTL Support for global adoption.

Loading/Processing UX: Instead of boring loaders, use skeleton previews or animated progress with estimated time.

Multi-file batch support where it makes sense (e.g., compression, conversion, merging) but keep single-file only for precision tools (e.g., cropping, watermark placement, page editing).

Cloud Save & Share: Export to Google Drive, Dropbox, or share via link.

üîπ Special Notes

For cropper and other single-image tools, restrict to only one file at a time to avoid messy crop regions.

Ensure transform controls are smooth (resize handles, drag area, rotate angle).

All tools should feel like professional desktop apps but simple enough for a beginner.

Always prioritize essential, useful functionality over adding "just another option." and keep options in canvas/preview  for better expreience by adjusting or button clicking not with manual input only - this makes more dificulties.

also you need to update the home page and the header

you know that this site are multi-domain with single codebase

my domains
PixoraTools.com (global domain, this will be hold all the tools) - bydefault
PixoraPDF.com - all pdf related tools - inspired by https://www.ilovepdf.com/
PixoraIMG.com - all image related tools - inspired by https://www.iloveimg.com/
Pixoraqrcode.com - qr code generator as like https://www.qrcode-monkey.com/ 
PixoraNet.com - Network related tools - 
PixoraSeo.com - Seo Related Tools - inspired by https://smallseotools.com
PixoraCode.com - Code Related tools - inspired by https://codebeautify.org/htmlviewer
Pixorautilities.com - Utilities related tools



it always should be like this
@components/image-tools-layout.tsx
@components/pdf-tools-layout.tsx
@components/text-tools-layout.tsx
@components/code-tools-layout.tsx

not like this
@components/simple-image-tools-layout.tsx
@components/enchanced-image-tools-layout.tsx
@components/simple-pdf-tools-layout.tsx
@components/enchanced-pdf-tools-layout.tsx
or other files also be like this, because no need to rename unncessary for same things.



------------


@app/*
@components/*
@hooks/*
@lib/*


enhance the overall functionality, features, hassle free of all tools
also fix all the problems of overall all the tools, because no any tools all the functionality and features are not working smoothly and perfectly.
and also check for function errors, syntax errors etc problems can be happend.
-------------------
i  have attached some screenshorts also, you need to make improvements our current tools features, functionality, UI/UX etc.

--------------

also currently the codebase has much more problems eg: syntax issue, function issue, import issue etc.

--------

all tools process must be client side, not server side process, it can save the much more server resources.




You are an expert React/Next.js + TypeScript + Tailwind + shadcn/ui developer.
Your task is to build a multi-tool SaaS web platform for Image, PDF, and Utility tools.
The code must be bug-free, production-ready, modular, and AI-safe for long-term scaling.

üîπ General Rules

Always add "use client" on top of any file using React hooks (useState, useEffect, useRouter, etc.).

Always close all JSX tags & functions properly (no ‚ÄúUnexpected token‚Äù issues).

Group tools into categories (Image Tools, PDF Tools, Text Tools, Utility Tools).

All components must be client-safe with strict TypeScript types.

Use shadcn/ui for UI components (Card, Tabs, Dropdown, Modal, Button, Input).

Use lucide-react for icons.

Use framer-motion for smooth animations.

Use TailwindCSS for styling (responsive, minimal, grid-based layouts).

Use error boundaries & try/catch for tool actions (no runtime crashes).

Keep each tool modular & pluggable (easy to add/remove).

File paths must be correct (@/components/..., @/lib/...).

Code must compile without ESLint/TypeScript errors.

Always export a default React component for pages.


üîπ Code Style & Error Prevention

Always check JSX closures ‚Üí no Unexpected token div errors.

Wrap long functions with clear return before JSX.

No unused imports.

Handle missing files/modules with fallback UI.

Add loading states & error messages for async tasks.

Use React Suspense + dynamic imports if heavy libraries are needed.

Ensure file operations (compress, convert, etc.) use Web APIs / canvas / wasm safely (no blocking main thread).



üîπ Development Checklist (AI MUST FOLLOW)

‚úÖ "use client" in client components
‚úÖ Close all functions, reduce/map calls, and JSX tags
‚úÖ TypeScript strict mode (strict: true)
‚úÖ Components must compile (npm run build works without errors)
‚úÖ Modular exports (easy to extend tools)
‚úÖ UI must look professional & consistent (Tailwind + shadcn)
‚úÖ No deprecated API usage
‚úÖ Prevent Next.js ‚ÄúInvariant: workUnitAsyncStorage‚Äù errors by separating server vs client correctly

Every time you generate code, validate that it runs without syntax or Next.js invariant errors. If an error is possible (like missing closure or wrong client/server mix), fix it automatically before outputting code.



Ensure the project compiles and runs with zero runtime or compile-time errors in Next.js App Router.
Specifically:

Automatically detect and fix client/server component mismatches:

If a file uses useState, useEffect, useRouter, useSearchParams, or other client-only hooks, prepend "use client" at the top.

If a component doesn‚Äôt need client hooks, keep it as a server component for performance.

Resolve errors like:

Invariant: Expected workUnitAsyncStorage to have a store

Plugin is not supported with current @swc/core

Any NonErrorEmittedError issues.

Normalize all imports to avoid path errors (@app/*, @components/*, @hooks/*, @lib/*) and ensure TypeScript/tsconfig paths are respected.

Fix SWC plugin compatibility and ensure the right @swc/core version is installed.

Enforce consistent client/server boundaries to avoid hydration bugs.

Apply lint rules to prevent reintroduction of these issues.
you need to handle more better way to keep constenticy.